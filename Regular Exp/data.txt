Both patterns and +91-8876554301 strings to be searched wert@gmail.com can be Unicode strings (str) as well
 as 8-bit strings (bytes). However,+91-9876543231 Unicode strings asdf@gmail.com and 8-bit strings +91-4567890123 cannot be mixed: 
 that is, you cannot match a abcd@gmail.com Unicode string with a byte pattern or vice-versa; similarly, 
 when asking for a substitution, the replacement string must be of the same type as both the
  pattern and the search string.

Regular expressions use the backslash 3456654398 character ('\') to indicate special  zxcv@gmail.com forms or to allow 
special characters to 1234 be used without invoking their special meaning. This collides with Python’s 
usage of the same character for the same purpose in string literals; acvyfd@outlook.com for example, to match a literal 
backslash, one might have to write '\\\\' as the pattern +91-1234 string, because the regular expression must 
be \\, and bvcdfg@yaho.com each backslash must be expressed as \\ inside a regular Python string literal. Also, please 
note that any invalid escape sequences in Python’s usage of the backslash bvgghst@rahul.com in string literals now 
generate a SyntaxWarning and in the future this will become a SyntaxError. This behaviour will happen 
even if it is a valid escape sequence for a regular expression.

The solution is to use Python’s raw +124-8765434 string notation for regular expression patterns; backslashes are
 not handled in any special way in a vcdfg@google.com string literal prefixed with 'r'. So r"\n" is a two-character
  string containing '\' and 'n', while "\n" is a one-character string containing a newline. Usually 
  patterns will be expressed in Python code using this raw string notation.

It is important to note that most regular expression operations are available as module-level functions 
and methods on compiled regular expressions. The functions are shortcuts that don’t require you to
 compile a regex object first, but miss some fine-tuning parameters.